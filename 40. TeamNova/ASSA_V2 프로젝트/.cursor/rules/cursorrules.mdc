---
description: 
globs: 
alwaysApply: true
---
# ASSA V2 프로젝트 개발 프로세스 규칙

## 🎯 개발 프로세스 순서 (필수 준수)

모든 새로운 기능 개발이나 변경 사항은 반드시 다음 3단계를 순서대로 진행해야 합니다:
각 단계별로 별도의 폴더에 별도의 파일로 정리해서 저장하세요

### 1단계: 요구사항 정의 📋
- 기능의 목적과 범위를 명확히 정의
- 사용자 스토리 또는 유스케이스 작성
- 입력/출력 데이터 명세
- 성능 요구사항 및 제약사항 정의
- 관련 문서와의 연관성 확인

### 2단계: 설계문서 작성 📐
- API 엔드포인트 설계 (Laravel 백엔드)
- 데이터베이스 스키마 변경사항 (있는 경우)
- Socket 프로토콜 정의 (실시간 기능의 경우)
- Android UI/UX 설계 및 컴포넌트 구조
- 컴포넌트 간 인터페이스 정의
- 에러 처리 및 예외 상황 설계

### 3단계: 개발 TODO 리스트 ✅
- 구현할 클래스/함수 목록
- 테스트 케이스 계획
- 우선순위별 작업 분류 (P0, P1, P2)
- 예상 작업 시간 및 의존성
- 검증 방법 및 완료 기준
- 커밋 시점 정의

## 🚫 금지사항

- 요구사항 정의 없이 바로 코드 작성 금지
- 설계 문서 없이 복잡한 기능 구현 금지
- TODO 리스트 없이 무계획적 개발 금지
- 원격저장소로 push 금지

## 📚 참조 문서 활용 규칙

개발 시 반드시 다음 공통 문서들을 참조하여 일관성을 유지하세요:

### 필수 참조 문서
- `00. 문서목록.md` - 전체 문서 네비게이션
- `01. 통합 설계 및 개발 계획서.md` - 프로젝트 전체 방향성
- `12. 컴포넌트 간 인터페이스 명세.md` - 시스템 통합 가이드
- `14. LLM 활용 가이드.md` - 효과적인 문서 활용법

### 역할별 우선 참조 경로
**Android 개발 시:**
01 → 03 → 04 → 05 → 12 → 09 → 10

**Laravel 백엔드 개발 시:**
01 → 02 → 03 → 05 → 12 → 07 → 11

**Java Socket 서버 개발 시:**
01 → 02 → 04 → 05 → 12 → 08 → 13

## ✨ 코드 품질 기준

### 개발 원칙
- **DRY (Don't Repeat Yourself)**: 중복 코드 최소화
- **SOLID 원칙**: 객체지향 설계 원칙 준수
- **Clean Code**: 읽기 쉽고 유지보수 가능한 코드
- **Test-Driven Development**: 테스트 코드 우선 작성

### 네이밍 규칙
- **Android**: CamelCase (Java), snake_case (리소스)
- **Laravel**: snake_case (DB, 파일), camelCase (메서드)
- **Java Socket**: CamelCase 일관성 유지

### 주석 규칙
- 복잡한 비즈니스 로직에는 반드시 한글 주석
- API 메서드에는 JSDoc/PHPDoc 스타일 문서화
- TODO, FIXME, HACK 태그 활용

## 🔄 협업 규칙

### Git 워크플로우
- 브랜치명: `feature/{컴포넌트}-{기능명}` (예: `feature/android-login`)
- 커밋 메시지: `[컴포넌트] 타입: 간단한 설명`
- PR 전 반드시 테스트 통과 확인

### 문서 업데이트
- 새로운 API 추가 시 `03. PHP 백엔드 API 명세.md` 업데이트
- DB 스키마 변경 시 `02. 데이터베이스 스키마.md` 업데이트
- Socket 프로토콜 변경 시 `04. Java 실시간 소켓 서버 메시지 프로토콜.md` 업데이트

## 🛡️ 보안 및 성능

### 보안 체크리스트
- JWT 토큰 검증 로직 확인
- SQL 인젝션 방지 (Prepared Statement 사용)
- XSS 공격 방지 (입력 데이터 검증)
- API Rate Limiting 적용

### 성능 최적화
- 데이터베이스 쿼리 최적화 (N+1 문제 해결)
- 이미지 압축 및 캐싱 전략
- Socket 연결 풀 관리
- 메모리 누수 방지

## 📝 예시 템플릿

### 새 기능 개발 시 사용할 템플릿:

```markdown
## 🎯 요구사항 정의
- **기능명**: [기능 이름]
- **목적**: [왜 이 기능이 필요한가?]
- **사용자 스토리**: [사용자 관점에서의 시나리오]
- **입력**: [어떤 데이터가 들어오는가?]
- **출력**: [어떤 결과를 반환하는가?]
- **제약사항**: [성능, 보안, 기술적 제약]

## 📐 설계문서
- **API 설계**: [엔드포인트, 메서드, 파라미터]
- **DB 변경**: [테이블, 컬럼 추가/수정]
- **UI 컴포넌트**: [화면 구성, 상태 관리]
- **에러 처리**: [예외 상황 및 처리 방법]

## ✅ 개발 TODO
- [ ] **P0 (필수)**: [핵심 기능 구현]
- [ ] **P1 (중요)**: [부가 기능 구현]
- [ ] **P2 (선택)**: [최적화 및 개선]
- [ ] **테스트**: [단위/통합/E2E 테스트]
- [ ] **문서화**: [관련 문서 업데이트]
```

## 🚀 시작 명령어

새로운 작업을 시작할 때는 항상:
1. `14. LLM 활용 가이드.md` 먼저 확인
2. 관련 문서들 검토
3. 위 템플릿으로 요구사항 정의부터 시작

---

**이 규칙을 준수하여 체계적이고 일관성 있는 개발을 진행하세요!** 🎯 